// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"signIn/ent/polls"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Polls is the model entity for the Polls schema.
type Polls struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "Title" field.
	Title string `json:"Title,omitempty"`
	// Options holds the value of the "Options" field.
	Options []string `json:"Options,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// CreatedBy holds the value of the "CreatedBy" field.
	CreatedBy    string `json:"CreatedBy,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Polls) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case polls.FieldOptions:
			values[i] = new([]byte)
		case polls.FieldID:
			values[i] = new(sql.NullInt64)
		case polls.FieldTitle, polls.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case polls.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Polls fields.
func (_m *Polls) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case polls.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case polls.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case polls.FieldOptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Options", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Options); err != nil {
					return fmt.Errorf("unmarshal field Options: %w", err)
				}
			}
		case polls.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case polls.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedBy", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Polls.
// This includes values selected through modifiers, order, etc.
func (_m *Polls) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Polls.
// Note that you need to call Polls.Unwrap() before calling this method if this Polls
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Polls) Update() *PollsUpdateOne {
	return NewPollsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Polls entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Polls) Unwrap() *Polls {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Polls is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Polls) String() string {
	var builder strings.Builder
	builder.WriteString("Polls(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("Title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("Options=")
	builder.WriteString(fmt.Sprintf("%v", _m.Options))
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CreatedBy=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// PollsSlice is a parsable slice of Polls.
type PollsSlice []*Polls
