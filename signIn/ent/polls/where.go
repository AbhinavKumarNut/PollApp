// Code generated by ent, DO NOT EDIT.

package polls

import (
	"signIn/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Polls {
	return predicate.Polls(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Polls {
	return predicate.Polls(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Polls {
	return predicate.Polls(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Polls {
	return predicate.Polls(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Polls {
	return predicate.Polls(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Polls {
	return predicate.Polls(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Polls {
	return predicate.Polls(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Polls {
	return predicate.Polls(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Polls {
	return predicate.Polls(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "Title" field. It's identical to TitleEQ.
func Title(v string) predicate.Polls {
	return predicate.Polls(sql.FieldEQ(FieldTitle, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Polls {
	return predicate.Polls(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "CreatedBy" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Polls {
	return predicate.Polls(sql.FieldEQ(FieldCreatedBy, v))
}

// TitleEQ applies the EQ predicate on the "Title" field.
func TitleEQ(v string) predicate.Polls {
	return predicate.Polls(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "Title" field.
func TitleNEQ(v string) predicate.Polls {
	return predicate.Polls(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "Title" field.
func TitleIn(vs ...string) predicate.Polls {
	return predicate.Polls(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "Title" field.
func TitleNotIn(vs ...string) predicate.Polls {
	return predicate.Polls(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "Title" field.
func TitleGT(v string) predicate.Polls {
	return predicate.Polls(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "Title" field.
func TitleGTE(v string) predicate.Polls {
	return predicate.Polls(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "Title" field.
func TitleLT(v string) predicate.Polls {
	return predicate.Polls(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "Title" field.
func TitleLTE(v string) predicate.Polls {
	return predicate.Polls(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "Title" field.
func TitleContains(v string) predicate.Polls {
	return predicate.Polls(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "Title" field.
func TitleHasPrefix(v string) predicate.Polls {
	return predicate.Polls(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "Title" field.
func TitleHasSuffix(v string) predicate.Polls {
	return predicate.Polls(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "Title" field.
func TitleEqualFold(v string) predicate.Polls {
	return predicate.Polls(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "Title" field.
func TitleContainsFold(v string) predicate.Polls {
	return predicate.Polls(sql.FieldContainsFold(FieldTitle, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.Polls {
	return predicate.Polls(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.Polls {
	return predicate.Polls(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Polls {
	return predicate.Polls(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Polls {
	return predicate.Polls(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.Polls {
	return predicate.Polls(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.Polls {
	return predicate.Polls(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.Polls {
	return predicate.Polls(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.Polls {
	return predicate.Polls(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "CreatedBy" field.
func CreatedByEQ(v string) predicate.Polls {
	return predicate.Polls(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "CreatedBy" field.
func CreatedByNEQ(v string) predicate.Polls {
	return predicate.Polls(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "CreatedBy" field.
func CreatedByIn(vs ...string) predicate.Polls {
	return predicate.Polls(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "CreatedBy" field.
func CreatedByNotIn(vs ...string) predicate.Polls {
	return predicate.Polls(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "CreatedBy" field.
func CreatedByGT(v string) predicate.Polls {
	return predicate.Polls(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "CreatedBy" field.
func CreatedByGTE(v string) predicate.Polls {
	return predicate.Polls(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "CreatedBy" field.
func CreatedByLT(v string) predicate.Polls {
	return predicate.Polls(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "CreatedBy" field.
func CreatedByLTE(v string) predicate.Polls {
	return predicate.Polls(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "CreatedBy" field.
func CreatedByContains(v string) predicate.Polls {
	return predicate.Polls(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "CreatedBy" field.
func CreatedByHasPrefix(v string) predicate.Polls {
	return predicate.Polls(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "CreatedBy" field.
func CreatedByHasSuffix(v string) predicate.Polls {
	return predicate.Polls(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByEqualFold applies the EqualFold predicate on the "CreatedBy" field.
func CreatedByEqualFold(v string) predicate.Polls {
	return predicate.Polls(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "CreatedBy" field.
func CreatedByContainsFold(v string) predicate.Polls {
	return predicate.Polls(sql.FieldContainsFold(FieldCreatedBy, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Polls) predicate.Polls {
	return predicate.Polls(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Polls) predicate.Polls {
	return predicate.Polls(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Polls) predicate.Polls {
	return predicate.Polls(sql.NotPredicates(p))
}
