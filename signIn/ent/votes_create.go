// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"signIn/ent/votes"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VotesCreate is the builder for creating a Votes entity.
type VotesCreate struct {
	config
	mutation *VotesMutation
	hooks    []Hook
}

// SetPollID sets the "PollID" field.
func (_c *VotesCreate) SetPollID(v int) *VotesCreate {
	_c.mutation.SetPollID(v)
	return _c
}

// SetVotes sets the "Votes" field.
func (_c *VotesCreate) SetVotes(v map[string][]string) *VotesCreate {
	_c.mutation.SetVotes(v)
	return _c
}

// Mutation returns the VotesMutation object of the builder.
func (_c *VotesCreate) Mutation() *VotesMutation {
	return _c.mutation
}

// Save creates the Votes in the database.
func (_c *VotesCreate) Save(ctx context.Context) (*Votes, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *VotesCreate) SaveX(ctx context.Context) *Votes {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VotesCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VotesCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *VotesCreate) check() error {
	if _, ok := _c.mutation.PollID(); !ok {
		return &ValidationError{Name: "PollID", err: errors.New(`ent: missing required field "Votes.PollID"`)}
	}
	if _, ok := _c.mutation.Votes(); !ok {
		return &ValidationError{Name: "Votes", err: errors.New(`ent: missing required field "Votes.Votes"`)}
	}
	return nil
}

func (_c *VotesCreate) sqlSave(ctx context.Context) (*Votes, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *VotesCreate) createSpec() (*Votes, *sqlgraph.CreateSpec) {
	var (
		_node = &Votes{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(votes.Table, sqlgraph.NewFieldSpec(votes.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.PollID(); ok {
		_spec.SetField(votes.FieldPollID, field.TypeInt, value)
		_node.PollID = value
	}
	if value, ok := _c.mutation.Votes(); ok {
		_spec.SetField(votes.FieldVotes, field.TypeJSON, value)
		_node.Votes = value
	}
	return _node, _spec
}

// VotesCreateBulk is the builder for creating many Votes entities in bulk.
type VotesCreateBulk struct {
	config
	err      error
	builders []*VotesCreate
}

// Save creates the Votes entities in the database.
func (_c *VotesCreateBulk) Save(ctx context.Context) ([]*Votes, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Votes, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VotesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *VotesCreateBulk) SaveX(ctx context.Context) []*Votes {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VotesCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VotesCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
