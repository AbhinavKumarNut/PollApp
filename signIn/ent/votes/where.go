// Code generated by ent, DO NOT EDIT.

package votes

import (
	"signIn/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Votes {
	return predicate.Votes(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Votes {
	return predicate.Votes(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Votes {
	return predicate.Votes(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Votes {
	return predicate.Votes(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Votes {
	return predicate.Votes(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Votes {
	return predicate.Votes(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Votes {
	return predicate.Votes(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Votes {
	return predicate.Votes(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Votes {
	return predicate.Votes(sql.FieldLTE(FieldID, id))
}

// PollID applies equality check predicate on the "PollID" field. It's identical to PollIDEQ.
func PollID(v int) predicate.Votes {
	return predicate.Votes(sql.FieldEQ(FieldPollID, v))
}

// PollIDEQ applies the EQ predicate on the "PollID" field.
func PollIDEQ(v int) predicate.Votes {
	return predicate.Votes(sql.FieldEQ(FieldPollID, v))
}

// PollIDNEQ applies the NEQ predicate on the "PollID" field.
func PollIDNEQ(v int) predicate.Votes {
	return predicate.Votes(sql.FieldNEQ(FieldPollID, v))
}

// PollIDIn applies the In predicate on the "PollID" field.
func PollIDIn(vs ...int) predicate.Votes {
	return predicate.Votes(sql.FieldIn(FieldPollID, vs...))
}

// PollIDNotIn applies the NotIn predicate on the "PollID" field.
func PollIDNotIn(vs ...int) predicate.Votes {
	return predicate.Votes(sql.FieldNotIn(FieldPollID, vs...))
}

// PollIDGT applies the GT predicate on the "PollID" field.
func PollIDGT(v int) predicate.Votes {
	return predicate.Votes(sql.FieldGT(FieldPollID, v))
}

// PollIDGTE applies the GTE predicate on the "PollID" field.
func PollIDGTE(v int) predicate.Votes {
	return predicate.Votes(sql.FieldGTE(FieldPollID, v))
}

// PollIDLT applies the LT predicate on the "PollID" field.
func PollIDLT(v int) predicate.Votes {
	return predicate.Votes(sql.FieldLT(FieldPollID, v))
}

// PollIDLTE applies the LTE predicate on the "PollID" field.
func PollIDLTE(v int) predicate.Votes {
	return predicate.Votes(sql.FieldLTE(FieldPollID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Votes) predicate.Votes {
	return predicate.Votes(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Votes) predicate.Votes {
	return predicate.Votes(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Votes) predicate.Votes {
	return predicate.Votes(sql.NotPredicates(p))
}
